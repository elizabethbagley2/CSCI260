#Chapter 1 of *Pragmatic Programmer*
In this chapter there was a lot of discussion about ways to be a better programmer, not in coding, but as a human. I liked the way this book presented the pros and cons of certain approaches and was fairly straightforward in their delineation of ideas. The point made about being up-front and responsible resonated as important to me; so often we are prepared to make up excuses or blame others when something goes wrong, but taking responsibilty is better for everyone. Next, in the discussion on quality I am always surprised by a statement that insinuates code or a project that is not exactly what you would like it to be is still acceptable. I think this is something we all know, but it is something we often choose to ignore. I know I have difficulty turning something acceptable in for a deadline when I know I can make it better with time. I also found the sections on communication and knowledge growth to be helpful and surprising. I think a lot of people get bogged down in their own projects and that becomes their life. I liked that these sections highlighted that getting knowledge outside of these areas is important; we all need to participate in personal growth to grow the rest of society. This connects to communication. As professionals we can be so wrapped up in a project that communicating with others becomes difficult. We are too technical or too focused on a small part of the big picture. Practicing good communication is just as important as practicing good code. One area that I was a bit confused on, however, was the section on software entropy. This section described the chaos that can ensue in coding if we don't keep it well maintained. I think I might have gotten lost in some of their metaphors, but were they essentially saying that to ensure good code, we need to limit small breaches in judgement? Overall, this first chapter took an approach to programming that I generally don't think about: the human approach. 
